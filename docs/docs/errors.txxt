Error Handling

Error handling is critical for a program that processes user-generated commands 
and transforms configuration files. A tool that modifies the file system must 
provide clear, actionable error messages.

Lua has a relaxed approach to error handling, so this document defines how we 
handle errors in dodot.

1. Design Principles

    - Fail fast with clear messages
    - Use structured error codes instead of raw strings
    - Make errors testable (no string matching in tests)
    - Provide actionable information to users
    - Support both CLI and programmatic usage

2. Implementation Structure

    lua/dodot/errors/init.lua      - Error creation and utilities
    lua/dodot/errors/codes.lua     - Error codes and message templates

3. Error Codes System

All errors must have unique error codes defined in codes.lua. This guarantees 
consistent error identification and makes testing reliable.

The codes.lua structure:

    local M = {
        codes = {
            "MISSING_DOTFILES_ROOT",
            "INVALID_PACK_PATH", 
            "PERMISSION_DENIED",
            "INVALID_TRIGGER_CONFIG",
            "FSYNTH_OPERATION_FAILED",
            "DUPLICATE_ERROR_CODE"
        },
        
        messages = {
            MISSING_DOTFILES_ROOT = "DOTFILES_ROOT not set. Set environment variable or use --dotfiles-root",
            INVALID_PACK_PATH = "Pack path does not exist: %s",
            PERMISSION_DENIED = "Permission denied accessing: %s",
            INVALID_TRIGGER_CONFIG = "Invalid trigger in %s: %s",
            FSYNTH_OPERATION_FAILED = "File system operation failed: %s",
            DUPLICATE_ERROR_CODE = "Error code '%s' already exists"
        }
    }

Error codes must be:
    - UPPERCASE_WITH_UNDERSCORES
    - Descriptive but concise
    - Unique across the entire codebase

4. Error Object Structure

All errors are represented as structured tables:

    local error_obj = {
        code = "ERROR_CODE",           -- Required: short identifier
        message = "formatted message", -- Required: human-readable description
        data = {...},                  -- Optional: data used for formatting
        context = {...}                -- Optional: additional context
    }

5. Error Creation API

The errors/init.lua provides the error creation interface:

    local errors = require("dodot.errors")
    
    -- Basic error
    local err = errors.create("INVALID_PACK_PATH", {"/bad/path"})
    
    -- Error with context
    local err = errors.create("PERMISSION_DENIED", {"/protected/file"}, {
        operation = "create_symlink",
        pack = "vim-config"
    })
    
    -- Validation
    if errors.is_valid_code("SOME_CODE") then
        -- code exists
    end

6. Error Categories

Based on dodot's architecture, we need these error categories:

    Configuration Errors:
        MISSING_DOTFILES_ROOT
        INVALID_DOTFILES_ROOT
        MALFORMED_CONFIG_FILE
        
    Pack Errors:
        PACK_NOT_FOUND
        PACK_ACCESS_DENIED
        PACK_IGNORED
        
    Trigger/Matcher Errors:
        INVALID_TRIGGER_CONFIG
        TRIGGER_VALIDATION_FAILED
        MATCHER_CONFLICT
        
    Power-up Errors:
        POWERUP_NOT_FOUND
        POWERUP_VALIDATION_FAILED
        POWERUP_EXECUTION_FAILED
        
    File System Errors:
        PERMISSION_DENIED
        FILE_NOT_FOUND
        SYMLINK_FAILED
        FSYNTH_OPERATION_FAILED
        
    CLI Errors:
        INVALID_COMMAND_ARGS
        MISSING_REQUIRED_ARG

7. Error Propagation Strategy

Following functional programming principles:

    - Pure functions return (result, error) tuples
    - Never throw exceptions in business logic
    - CLI layer handles error display
    - Validation happens early in the pipeline

Example pattern:

    function get_packs(dotfiles_root)
        if not dotfiles_root then
            return nil, errors.create("MISSING_DOTFILES_ROOT")
        end
        
        -- ... validation logic
        
        return packs, nil
    end
    
    -- Usage
    local packs, err = get_packs(root)
    if err then
        return nil, err
    end

8. Testing Integration

Error codes make testing straightforward:

    it("should return error for missing dotfiles root", function()
        local packs, err = dodot.get_packs(nil)
        
        assert.is_nil(packs)
        assert.is_not_nil(err)
        assert.equals("MISSING_DOTFILES_ROOT", err.code)
    end)

No string matching required - just check the error code.

9. CLI Error Display

The CLI layer formats errors for user display:

    if err then
        print("Error: " .. err.message)
        if verbose_mode and err.context then
            print("Context: " .. serialize_context(err.context))
        end
        os.exit(1)
    end

10. Implementation Guidelines

    - Add new error codes to codes.lua first
    - Keep messages actionable and user-friendly
    - Use format strings (%s) for dynamic content
    - Include relevant context in complex errors
    - Test error conditions explicitly
    - Document expected errors in function comments

This approach provides robust error handling while maintaining simplicity and 
testability throughout the dodot codebase.


