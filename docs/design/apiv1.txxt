                            dodot API v1 Design


1. Overview 

    This document defines the API for dodot's v1 implementation, incorporating the improved 
    design with separate Triggers, Power-ups, and Matchers. The API follows functional 
    programming principles and leverages the fsynth library for safe filesystem operations.

    The core insight is that we need three distinct entities:
        - Triggers: Pure matching logic (what files to match)
        - Power-ups: Pure processing logic (what to do with matched files)
        - Matchers: Configuration connecting triggers to power-ups

2. Core Data Types

    2.1 Pack Structure
        
        A pack represents a discovered dotfile directory.

            local pack = {
                path = "string",        -- absolute path to pack directory
                name = "string",        -- pack name (directory basename)
                config = table or nil   -- pack-specific configuration
            }

    2.2 Trigger Interface
        
        A trigger is a pure function that determines if a file should be processed.
        All triggers implement this interface:

            local trigger = {
                type = "string",        -- trigger type identifier
                match = function(self, file_path, pack_path)
                    -- Returns: boolean, metadata_table
                end,
                validate = function(self)
                    -- Returns: boolean, error_message
                end
            }

    2.3 Power-up Interface
        
        A power-up processes matched files and returns a list of actions.

            local power_up = {
                name = "string",        -- power-up identifier
                process = function(self, matched_files, pack_path, options)
                    -- matched_files: array of {path, metadata} 
                    -- Returns: array_of_actions, error_message_or_nil
                end,
                validate = function(self, matched_files, pack_path, options)
                    -- Returns: boolean, error_message
                end
            }

    2.4 TriggerMatch Structure
        
        Represents a successful match made by a trigger via matcher configuration.

            local trigger_match = {
                trigger_name = "string",    -- name of trigger that fired
                file_path = "string",       -- matched file path
                pack_path = "string",       -- pack containing the file
                metadata = table or nil,    -- trigger-provided metadata
                power_up_name = "string",   -- power-up to invoke
                priority = number,          -- matcher priority
                options = table or nil      -- options for power-up
            }

    2.5 Action Types
        
        Actions represent high-level operations to be performed.

            local action = {
                type = "string",        -- action type
                description = "string", -- human readable
                data = {},             -- action-specific data
                pack_source = "string", -- source pack name
                metadata = {}          -- additional metadata
            }

3. Standard Trigger Types

    3.1 FileNameTrigger
        
        Matches files based on glob patterns with advanced options.

            local file_trigger = FileNameTrigger.new(patterns, options)

        Patterns: string or array of glob patterns
        Options:
            case_sensitive = boolean (default: true)
            recursive = boolean (default: false)
            exclude_patterns = array of strings

    3.2 DirectoryTrigger
        
        Matches directories by name and properties.

            local dir_trigger = DirectoryTrigger.new(name, options)

        Options:
            must_exist = boolean (default: true)
            must_be_executable = boolean (default: false)

    3.3 ExtensionTrigger
        
        Matches files by extension.

            local ext_trigger = ExtensionTrigger.new(extensions)

        Extensions: array of strings like {".sh", ".zsh", ".bash"}

4. Standard Power-ups

    4.1 symlink
        
        Creates symlinks to files and directories.

            Actions produced: link
            Options: 
                target_dir = "~" | "~/path" | "/absolute/path" (default: "~")
                create_dirs = boolean (default: true)
                overwrite = boolean (default: false)
                backup = boolean (default: false)

    4.2 shell_profile
        
        Adds shell scripts to the user's profile.

            Actions produced: shell_source
            Options: shell_types, order

    4.3 shell_add_path
        
        Adds directories to the shell's PATH.

            Actions produced: shell_add_path
            Options: prepend, shell_types

5. Registry System

    5.1 Component Registration
        
        All components are managed through a registry system:

            local libs = require("dodot.libs")
            libs.init() -- Initialize all registries
            
            -- Access registries
            local trigger_class, err = libs.triggers.get("file_name")
            local powerup_instance, err = libs.powerups.get("symlink")

    5.2 Built-in Components
        
        The system automatically registers built-in components:
            - Triggers: file_name, directory, extension
            - Power-ups: symlink, shell_profile, shell_add_path

6. Core API Functions

    6.1 Main Pipeline
        
            local get_packs = require("dodot.core.get_packs")
            local get_firing_triggers = require("dodot.core.get_firing_triggers")
            local get_actions = require("dodot.core.get_actions")
            local get_fs_ops = require("dodot.core.get_fs_ops")
            local run_ops = require("dodot.core.run_ops")

            -- 1. Discover pack candidates
            local candidates, err = get_packs.get_pack_candidates(dotfiles_root)
            
            -- 2. Create pack objects
            local packs, err = get_packs.get_packs(candidates)
            
            -- 3. Find firing triggers (matches)
            local trigger_matches, err = get_firing_triggers.get_firing_triggers(packs)
            
            -- 4. Generate actions from matches
            local actions, err = get_actions.get_actions(trigger_matches)
            
            -- 5. Convert to filesystem operations
            local operations, err = get_fs_ops.get_fs_ops(actions)
            
            -- 6. Execute operations
            local results, err = run_ops.run_ops(operations)

    6.2 Pack Discovery
        
            function get_pack_candidates(dotfiles_root)
                -- Scans dotfiles_root for valid pack directories
                -- Filters out hidden directories and invalid paths
                -- Returns: array of candidate paths, error
            end

            function get_packs(pack_candidate_paths)
                -- Converts candidate paths to Pack objects
                -- Validates each pack structure
                -- Returns: array of Pack objects, error
            end

    6.3 Trigger Matching
        
            function get_firing_triggers(packs)
                -- For each pack, scan files and test against matchers
                -- Uses configured matcher system to determine matches
                -- Groups matches by power-up and options
                -- Returns: array of TriggerMatch objects, error
            end

    6.4 Action Generation
        
            function get_actions(trigger_matches)
                -- Groups trigger matches by power-up and options
                -- Invokes power-up.process() for each group
                -- Collects all generated actions
                -- Returns: array of Action objects, error
            end

7. Matcher System

    7.1 Default Matchers
        
        The system provides basic matcher configurations through the matcher registry:

            local matchers = require("dodot.matchers")
            local matcher_configs, err = matchers.get_simulated_matchers()

    7.2 BasicMatcher Implementation
        
        Matchers connect triggers to power-ups with configuration:

            local matcher_config = {
                matcher_name = "string",
                trigger_name = "string",
                power_up_name = "string", 
                priority = number,
                options = {}
            }

8. Action to Operation Mapping

    8.1 Action Types to fsynth Operations
        
            link -> fsynth.op.symlink
            shell_source -> fsynth.op.create_file + fsynth.op.symlink
            shell_add_path -> fsynth.op.create_file
            brew_install -> fsynth.op.script_run
            script_run -> fsynth.op.script_run

    8.2 Operation Builder
        
            function get_fs_ops(actions)
                -- Converts high-level actions to fsynth operations
                -- Handles action-specific data transformation
                -- Returns: array of Operation objects, error
            end

9. Error Handling

    9.1 Error System
        
        Centralized error handling with error codes:

            local errors = require("dodot.errors")
            local err = errors.create("ERROR_CODE", details)

    9.2 Common Error Codes
        
            INVALID_DOTFILES_ROOT
            PACK_ACCESS_DENIED
            TRIGGER_NOT_FOUND
            POWERUP_NOT_FOUND
            POWERUP_EXECUTION_FAILED
            POWERUP_VALIDATION_FAILED

10. Testing and Validation

    10.1 Dry Run Support
        
        All operations support dry-run mode via fsynth:

            local results = fsynth.execute(operations, {dry_run = true})

    10.2 Validation Pipeline
        
        Each component validates its inputs:

            -- Trigger validation
            local valid, err = trigger:validate()
            
            -- Power-up validation  
            local valid, err = power_up:validate(files, pack_path, options)

11. Command Line Interface

    11.1 CLI Structure
        
        The CLI provides user-facing commands:

            local cli = require("dodot.cli")
            local deploy = require("dodot.commands.deploy")
            local list = require("dodot.commands.list")

    11.2 Main Commands
        
            deploy  -- Execute the full dotfile deployment pipeline
            list    -- List discovered packs and their contents

12. Library Integration

    12.1 External Dependencies
        
        The system integrates with external libraries:

            penlight (pl) -- File system operations and utilities
            fsynth       -- Safe filesystem operations (planned)
            melt         -- Configuration loading (planned)

    12.2 Registry Pattern
        
        Generic registry implementation for extensibility:

            local registry = require("dodot.utils.registry")
            local reg = registry.new()
            reg.add("name", component)
            local component, err = reg.get("name")

This API design reflects the actual implementation with its registry-based architecture,
modular core pipeline, and separation of concerns between triggers, power-ups, and 
matchers. The system provides a solid foundation for dotfile management while 
maintaining extensibility and testability.