-- Tests for ExtensionTrigger

describe("ExtensionTrigger", function()
    local extension = require("dodot.triggers.extension")
    local ExtensionTrigger = extension.ExtensionTrigger

    describe("new", function()
        it("should create a trigger with single extension string", function()
            local trigger = ExtensionTrigger.new("txt")
            assert.is_not_nil(trigger)
            assert.equals(1, #trigger.extensions)
            assert.equals(".txt", trigger.extensions[1])
            assert.equals("extension", trigger.type)
        end)

        it("should create a trigger with extension starting with dot", function()
            local trigger = ExtensionTrigger.new(".lua")
            assert.is_not_nil(trigger)
            assert.equals(".lua", trigger.extensions[1])
        end)

        it("should create a trigger with multiple extensions", function()
            local trigger = ExtensionTrigger.new({ "txt", "md", "rst" })
            assert.is_not_nil(trigger)
            assert.equals(3, #trigger.extensions)
            assert.equals(".txt", trigger.extensions[1])
            assert.equals(".md", trigger.extensions[2])
            assert.equals(".rst", trigger.extensions[3])
        end)

        it("should normalize extension case", function()
            local trigger = ExtensionTrigger.new({ "TXT", "Md" })
            assert.is_not_nil(trigger)
            assert.equals(".txt", trigger.extensions[1])
            assert.equals(".md", trigger.extensions[2])
        end)

        it("should reject nil extensions", function()
            local trigger, err = ExtensionTrigger.new(nil)
            assert.is_nil(trigger)
            assert.is_not_nil(err)
            assert.matches("requires extension configuration", err)
        end)

        it("should reject empty extension list", function()
            local trigger, err = ExtensionTrigger.new({})
            assert.is_nil(trigger)
            assert.is_not_nil(err)
            assert.matches("at least one extension", err)
        end)

        it("should reject empty extension string", function()
            local trigger, err = ExtensionTrigger.new("")
            assert.is_nil(trigger)
            assert.is_not_nil(err)
            assert.matches("non%-empty strings", err)
        end)

        it("should reject invalid extension types", function()
            local trigger, err = ExtensionTrigger.new(123)
            assert.is_nil(trigger)
            assert.is_not_nil(err)
            assert.matches("must be string or table", err)
        end)

        it("should reject list with empty string", function()
            local trigger, err = ExtensionTrigger.new({ "txt", "" })
            assert.is_nil(trigger)
            assert.is_not_nil(err)
            assert.matches("non%-empty strings", err)
        end)

        it("should reject list with non-string", function()
            local trigger, err = ExtensionTrigger.new({ "txt", 123 })
            assert.is_nil(trigger)
            assert.is_not_nil(err)
            assert.matches("non%-empty strings", err)
        end)
    end)

    describe("match", function()
        local trigger

        before_each(function()
            trigger = ExtensionTrigger.new({ "txt", "md" })
        end)

        it("should match files with .txt extension", function()
            local matches, metadata = trigger:match("test.txt", "/pack")
            assert.is_true(matches)
            assert.is_not_nil(metadata)
            assert.equals(".txt", metadata.matched_extension)
            assert.equals("test.txt", metadata.filename)
            assert.equals("test.txt", metadata.full_path)
        end)

        it("should match files with .md extension", function()
            local matches, metadata = trigger:match("README.md", "/pack")
            assert.is_true(matches)
            assert.is_not_nil(metadata)
            assert.equals(".md", metadata.matched_extension)
            assert.equals("README.md", metadata.filename)
        end)

        it("should match files in subdirectories", function()
            local matches, metadata = trigger:match("/path/to/file.txt", "/pack")
            assert.is_true(matches)
            assert.is_not_nil(metadata)
            assert.equals("file.txt", metadata.filename)
            assert.equals("/path/to/file.txt", metadata.full_path)
        end)

        it("should not match files with different extensions", function()
            local matches, metadata = trigger:match("test.lua", "/pack")
            assert.is_false(matches)
            assert.is_nil(metadata)
        end)

        it("should not match files without extensions", function()
            local matches, metadata = trigger:match("README", "/pack")
            assert.is_false(matches)
            assert.is_nil(metadata)
        end)

        it("should handle nil file path", function()
            local matches, metadata = trigger:match(nil, "/pack")
            assert.is_false(matches)
            assert.is_nil(metadata)
        end)

        it("should be case insensitive", function()
            local matches = trigger:match("test.TXT", "/pack")
            assert.is_true(matches)

            local matches = trigger:match("README.MD", "/pack")
            assert.is_true(matches)
        end)

        it("should handle multiple dots correctly", function()
            local matches = trigger:match("test.backup.txt", "/pack")
            assert.is_true(matches)

            local matches = trigger:match("archive.tar.gz", "/pack")
            assert.is_false(matches) -- Only matches the final extension
        end)

        it("should handle single extension trigger", function()
            local single_trigger = ExtensionTrigger.new("lua")

            local matches = single_trigger:match("init.lua", "/pack")
            assert.is_true(matches)

            local matches = single_trigger:match("test.txt", "/pack")
            assert.is_false(matches)
        end)

        it("should handle complex filenames", function()
            local matches = trigger:match("my-file_with-special.chars.txt", "/pack")
            assert.is_true(matches)
        end)
    end)

    describe("validate", function()
        it("should validate trigger with valid extensions", function()
            local trigger = ExtensionTrigger.new({ "txt", "md" })
            local valid, err = trigger:validate()
            assert.is_true(valid)
            assert.is_nil(err)
        end)

        it("should validate single extension trigger", function()
            local trigger = ExtensionTrigger.new("lua")
            local valid, err = trigger:validate()
            assert.is_true(valid)
            assert.is_nil(err)
        end)

        it("should validate complex extensions", function()
            local extensions = { "lua", "vim", "py", "js", "ts", "json", "yaml", "toml" }
            local trigger = ExtensionTrigger.new(extensions)
            local valid, err = trigger:validate()
            assert.is_true(valid)
            assert.is_nil(err)
        end)
    end)
end)
